
/* 
 *  class Node {
 *    int data;
 *    Node left; 
 *    Node right;
 *    public Node() {
 *      data = 0;
 *    }
 *    public Node(int d)  {
 *      data = d;
 *    }
 *  }
 *
 *  The above class defines a tree node.
 */
class Result {
    static void printTopView(Node root) {
      // Write your code here
      if(root == null){
        return;
      }
      Map<Integer,Integer> map = new TreeMap<>();
      Queue<Pair> q = new LinkedList<>();
      q.add(new Pair(root,0));
      while(!q.isEmpty()){
        Pair curr = q.poll();
        Node node = curr.node;
        int hd = curr.hd;
        if(!map.containsKey(hd)){
          map.put(hd,node.data);
        }
        if(node.left!=null){
          q.add(new Pair(node.left,hd-1));
        }
        if(node.right!=null){
          q.add(new Pair(node.right,hd+1));
        }
      }
      for(int values : map.values()){
        System.out.print(values + " ");
      }
      System.out.println();
    }
      static class Pair{
        Node node;
        int hd;
        Pair(Node node,int hd){
          this.node=node;
          this.hd=hd;
        }
      }
  }