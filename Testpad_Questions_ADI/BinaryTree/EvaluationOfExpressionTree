

/* class Node {
  int data; // data used as key value
  Node leftChild;
  Node rightChild;
  public Node()  {
    data=0;  }
  public Node(int d)  {
    data=d;  }
 } Above class is declared for use. */
 class Result {
    static int evaluateTree(Node t1) {
      if(t1==null){
        return 0;
      }
      if(t1.leftChild==null && t1.rightChild==null){
        return t1.data;
      }
      int leftSum = evaluateTree(t1.leftChild);
      int rightSum = evaluateTree(t1.rightChild);
      switch(t1.data){
        case '+':
          return leftSum + rightSum;
        case '-':
          return leftSum - rightSum;
        case '*':
          return leftSum * rightSum;
        case '/':
          if(rightSum!=0){
            return leftSum / rightSum;
          }
          else{
            throw new ArithmeticException("Not divisible");
          }
        default:
          throw new IllegalArgumentException("Not pos " + (char)t1.data);
      }
    }
  }