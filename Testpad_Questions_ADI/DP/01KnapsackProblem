class Result
{
  static int zeroOneKnapsack(int val[], int weight[], int n, int capacity){

    int[][] dp = new int[n + 1][capacity + 1];

    for (int i = 0; i <= n; i++) {
      for (int j = 0; j <= capacity; j++) {
        if (i == 0 || j == 0) {
          dp[i][j] = 0;
        }
      }
    }

    for (int i = 1; i <= n; i++) {
      for (int j = 1; j <= capacity; j++) {

        if (weight[i - 1] > j) {
          dp[i][j] = dp[i - 1][j];
        } 

        else {
          dp[i][j] = Math.max(dp[i - 1][j], dp[i - 1][j - weight[i - 1]] + val[i - 1]);
        }
      }
    }

    return dp[n][capacity];
  }
}


