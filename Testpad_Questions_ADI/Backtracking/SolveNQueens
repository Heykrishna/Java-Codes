

    
class Result 
{
// Complete this function to check placing queen at board[row][col] is safe or not by checking current row, left diagonal & right diagonal.
  int isSafe(int board[][], int row, int col, int N) 
  { 
    for(int j=0;j<col;j++){
      if(board[row][j]==1){
        return 0;
      }
    }
    int i=row;
    int j=col;
    while(i>=0 && j>=0){
      if(board[i][j]==1){
        return 0;
      }
      i--;
    j--;
    }
    i=row;
    j=col;
    while(i<N && j>=0){
      if(board[i][j]==1){
        return 0;
      }
      i++;
    j--;
    }
    return 1;
  } 
// Complete this function to solve the problem and save the answers in sol ArrayList as required.
  boolean solveNQUtil(int board[][], int col, int N, ArrayList<ArrayList<Integer> > sol)
  { 
    if(N == col){
      ArrayList<Integer> curr = new ArrayList<>();
      for(int i=0;i<N;i++){
        for(int j=0;j<N;j++){
          if(board[i][j]==1){
            curr.add(j);
          }
        }
      }
      sol.add(curr);
      return true;
    }
    boolean res = false;
    for(int i=0;i<N;i++){
      if(isSafe(board,i,col,N)==1){
        board[i][col]=1;
        res = solveNQUtil(board,col+1,N,sol)||res;
        board[i][col]=0;
      }
    }
    return res;
  } 
}