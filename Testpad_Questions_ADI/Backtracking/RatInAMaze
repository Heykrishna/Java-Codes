


class Result {
  public static int solveMaze(int maze[][], int size) {
    int[][] directions = {{0, 1}, {1, 0}}; // Right, Down
    int[][] visited = new int[size][size];
    return dfs(maze, visited, 0, 0, size, directions);
  }
  private static int dfs(int[][] maze, int[][] visited, int x, int y, int size, int[][] directions) {
    if (x < 0 || x >= size || y < 0 || y >= size || maze[x][y] == -1 || visited[x][y] == 1) {
      return 0; // Invalid move
    }
    if (x == size - 1 && y == size - 1) {
      return 1; // Reached destination
    }
    visited[x][y] = 1; // Mark visited
    int count = 0;
    for (int[] direction : directions) {
      int newX = x + direction[0];
      int newY = y + direction[1];
      count += dfs(maze, visited, newX, newY, size, directions);
    }
    visited[x][y] = 0; // Backtrack
    return count;
  }
}